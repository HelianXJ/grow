#!/usr/bin/env node

const os = require('os')
const program = require('commander')
const ora = require('ora')
const uid = require('uid')
const rm = require('rimraf').sync
const compile = require('../src/core/compile.js')
const api = require('../src/core/api.js')
const config = require('../src/core/config.js')
const logger = require('../src/core/logger.js')
const ui = require('../src/core/ui.js')

/**
 * Usage
 */

program
	.usage('<template name> <project name>')
	.parse(process.argv)

/**
 * Arguments parsing
 */

// Need 'template name' and 'project name' for init
if (program.args.length < 2) {
	return program.help()
}

const templateName = program.args[0]
const projectName = program.args[1]

downloadAndCompile()

/**
 * Download and Compile
 */

function downloadAndCompile() {
	// const tmpPath = `${os.tmpdir()}/grow-template-cache-${uid()}`
	const tmpPath = `./grow-template-cache-dev-${uid()}`
	const targetPath = path.resolve('.')

	ui.download.start()
	api.downloadGitRepo(makeRepoURL(), tmpPath, err => {
		if (err) {
			ui.download.fail()
			// TODO: logger
			throw err
		}
		ui.download.succeed()
		process.on('exit', () => {
			// if compiling will this work ?
			// rm(tmpPath)
		})

		ui.compile.start()
		compile(projectName, tmpPath, targetPath, err => {
			if (err) {
				ui.compile.fail()
				// TODO: logger
				throw err
			}
			ui.compile.succeed()
		})
	})
}

/**
 * Utility functions
 */

function makeRepoURL() {
	const template = templateName
	const username = config.data.username

	return `${username}/${template}`
}